/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferaybook.courses.manager.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.liferaybook.courses.manager.model.CourseSubscription;
import com.liferaybook.courses.manager.model.CourseSubscriptionModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CourseSubscription service. Represents a row in the &quot;lb_CourseSubscription&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CourseSubscriptionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseSubscriptionImpl}.
 * </p>
 *
 * @author Vitaliy Koshelenko
 * @see CourseSubscriptionImpl
 * @generated
 */
public class CourseSubscriptionModelImpl
	extends BaseModelImpl<CourseSubscription>
	implements CourseSubscriptionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a course subscription model instance should use the <code>CourseSubscription</code> interface instead.
	 */
	public static final String TABLE_NAME = "lb_CourseSubscription";

	public static final Object[][] TABLE_COLUMNS = {
		{"courseSubscriptionId", Types.BIGINT}, {"courseId", Types.BIGINT},
		{"userId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("courseSubscriptionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("courseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table lb_CourseSubscription (courseSubscriptionId LONG not null primary key,courseId LONG,userId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table lb_CourseSubscription";

	public static final String ORDER_BY_JPQL =
		" ORDER BY courseSubscription.courseSubscriptionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY lb_CourseSubscription.courseSubscriptionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COURSEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COURSESUBSCRIPTIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CourseSubscriptionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _courseSubscriptionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCourseSubscriptionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _courseSubscriptionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CourseSubscription.class;
	}

	@Override
	public String getModelClassName() {
		return CourseSubscription.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CourseSubscription, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CourseSubscription, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CourseSubscription, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CourseSubscription)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CourseSubscription, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CourseSubscription, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CourseSubscription)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CourseSubscription, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CourseSubscription, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<CourseSubscription, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<CourseSubscription, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CourseSubscription, Object>>();

			attributeGetterFunctions.put(
				"courseSubscriptionId",
				CourseSubscription::getCourseSubscriptionId);
			attributeGetterFunctions.put(
				"courseId", CourseSubscription::getCourseId);
			attributeGetterFunctions.put(
				"userId", CourseSubscription::getUserId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<CourseSubscription, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CourseSubscription, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CourseSubscription, ?>>();

			attributeSetterBiConsumers.put(
				"courseSubscriptionId",
				(BiConsumer<CourseSubscription, Long>)
					CourseSubscription::setCourseSubscriptionId);
			attributeSetterBiConsumers.put(
				"courseId",
				(BiConsumer<CourseSubscription, Long>)
					CourseSubscription::setCourseId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CourseSubscription, Long>)
					CourseSubscription::setUserId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public long getCourseSubscriptionId() {
		return _courseSubscriptionId;
	}

	@Override
	public void setCourseSubscriptionId(long courseSubscriptionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_courseSubscriptionId = courseSubscriptionId;
	}

	@Override
	public long getCourseId() {
		return _courseId;
	}

	@Override
	public void setCourseId(long courseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_courseId = courseId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCourseId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("courseId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CourseSubscription.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CourseSubscription toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CourseSubscription>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CourseSubscriptionImpl courseSubscriptionImpl =
			new CourseSubscriptionImpl();

		courseSubscriptionImpl.setCourseSubscriptionId(
			getCourseSubscriptionId());
		courseSubscriptionImpl.setCourseId(getCourseId());
		courseSubscriptionImpl.setUserId(getUserId());

		courseSubscriptionImpl.resetOriginalValues();

		return courseSubscriptionImpl;
	}

	@Override
	public CourseSubscription cloneWithOriginalValues() {
		CourseSubscriptionImpl courseSubscriptionImpl =
			new CourseSubscriptionImpl();

		courseSubscriptionImpl.setCourseSubscriptionId(
			this.<Long>getColumnOriginalValue("courseSubscriptionId"));
		courseSubscriptionImpl.setCourseId(
			this.<Long>getColumnOriginalValue("courseId"));
		courseSubscriptionImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));

		return courseSubscriptionImpl;
	}

	@Override
	public int compareTo(CourseSubscription courseSubscription) {
		long primaryKey = courseSubscription.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CourseSubscription)) {
			return false;
		}

		CourseSubscription courseSubscription = (CourseSubscription)object;

		long primaryKey = courseSubscription.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CourseSubscription> toCacheModel() {
		CourseSubscriptionCacheModel courseSubscriptionCacheModel =
			new CourseSubscriptionCacheModel();

		courseSubscriptionCacheModel.courseSubscriptionId =
			getCourseSubscriptionId();

		courseSubscriptionCacheModel.courseId = getCourseId();

		courseSubscriptionCacheModel.userId = getUserId();

		return courseSubscriptionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CourseSubscription, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CourseSubscription, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CourseSubscription, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CourseSubscription)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CourseSubscription>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CourseSubscription.class, ModelWrapper.class);

	}

	private long _courseSubscriptionId;
	private long _courseId;
	private long _userId;

	public <T> T getColumnValue(String columnName) {
		Function<CourseSubscription, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CourseSubscription)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"courseSubscriptionId", _courseSubscriptionId);
		_columnOriginalValues.put("courseId", _courseId);
		_columnOriginalValues.put("userId", _userId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("courseSubscriptionId", 1L);

		columnBitmasks.put("courseId", 2L);

		columnBitmasks.put("userId", 4L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CourseSubscription _escapedModel;

}